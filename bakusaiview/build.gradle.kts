/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id("java-library")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
	implementation("org.apache.commons:commons-collections4:4.5.0")
	implementation("com.squareup.okhttp3:okhttp:5.1.0")
	implementation("com.squareup.okhttp3:okhttp-urlconnection:5.1.0")
	implementation("org.jsoup:jsoup:1.21.2")
	implementation("org.apache.commons:commons-lang3:3.19.0")
	implementation("commons-io:commons-io:2.20.0")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}


tasks.withType<JavaCompile>().configureEach {
    options.encoding = "UTF-8"
}

tasks.withType<Jar>().configureEach {
    archiveBaseName = "BakusaiViewer"
    archiveVersion = "1.0.0"
    archiveExtension = "jar"
}

tasks.jar {
    manifest {
        attributes["Main-Class"] = "com.xrea.s8.otokiti.bakusaiviewer.App"
        attributes["Class-Path"] = configurations.runtimeClasspath.get().joinToString(separator = " ") { file -> "libs/${file.name}" }
    }
}

tasks.register<Copy>("copyJar") {
	group = "build"
    val libsDir = file("$buildDir/libs/libs")
    from(configurations.runtimeClasspath)
    into(libsDir)
}

tasks.register("generatedJar") {
	group = "build"
	description = "Cleans, builds, and copies the jar with dependencies."

    dependsOn("clean")
    dependsOn("compileJava")
    dependsOn("processResources")
    dependsOn("copyJar")
    dependsOn("jar")
}

tasks.named("compileJava") {
	mustRunAfter("clean")
}

tasks.named("processResources") {
	mustRunAfter("compileJava")
}

tasks.named("copyJar") {
	mustRunAfter("processResources")
}

tasks.named("jar") {
	mustRunAfter("copyJar")
}
